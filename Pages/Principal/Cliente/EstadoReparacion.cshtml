@page
@model mecanico_plus.Pages.Principal.Cliente.EstadoReparacionModel
@{
    ViewData["Title"] = "Estado de Reparación";

    string GetEstadoColor(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-yellow-500",
            "diagnóstico" => "bg-purple-500",
            "en proceso" => "bg-blue-500",
            "finalizada" => "bg-green-500",
            "Cancelada" => "bg-red-500",
            _ => "bg-gray-500",
        };
    }
}

<div class="bg-white rounded-lg shadow p-6">
    <h1 class="text-2xl font-bold mb-4">Estado de Reparación de Vehículo</h1>
    <div class="flex justify-end mb-4">
        <form method="get">
            <select asp-for="SelectedEstado" asp-items="Model.EstadosDisponibles" onchange="this.form.submit()">
            </select>
        </form>
    </div>
    @if (Model.Reparaciones == null || !Model.Reparaciones.Any())
    {
        <p>No se encontró información sobre la reparación de su vehículo.</p>
    }
    else
    {
        <div class="grid grid-cols-1 gap-6">
            @foreach (var reparacion in Model.Reparaciones)
            {
                <div class="bg-gray-100 p-4 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-2">@reparacion.Servicio</h2>
                    <p><strong>Estado:</strong> <span class="inline-block px-2 py-1 rounded-full text-white @GetEstadoColor(reparacion.Estado)">@reparacion.Estado</span></p>
                    <p><strong>Fecha de Inicio:</strong> @reparacion.FechaInicio.ToString("dd/MM/yyyy")</p>
                    <p><strong>Fecha Estimada de Finalización:</strong> @reparacion.FechaEstimadaFinalizacion?.ToString("dd/MM/yyyy") ?? "No disponible"</p>
                    <p><strong>Descripción:</strong> @reparacion.Descripcion</p>
                    <p><strong>Mecánico:</strong> @reparacion.Mecanico</p>
                    @if (reparacion.Estado == "Finalizada")
                    {
                        <div class="mt-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded">
                            <strong>¡Reparación Finalizada!</strong>
                            <p>Su vehículo está listo para ser recogido.</p>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<div id="alert-container" class="fixed top-5 right-5 hidden">
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong class="font-bold">Error:</strong>
        <span class="block sm:inline" id="alert-message"></span>
        <span id="close-alert" class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer text-red-700">
            &times;
        </span>
    </div>
</div>
<div id="success-alert-container" class="fixed top-5 right-5 hidden">
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
        <strong class="font-bold">Exito:</strong>
        <span class="block sm:inline" id="success-alert-message"></span>
        <span id="close-success-alert" class="absolute top-0 bottom-0 right-0 px-4 py-3 cursor-pointer text-green-700">
            &times;
        </span>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const alertMessage = '@TempData["ErrorMessage"]'; // Obtén el mensaje desde el TempData
        if (alertMessage) {
            const alertContainer = document.getElementById("alert-container");
            const alertText = document.getElementById("alert-message");
            const closeAlert = document.getElementById("close-alert");

            alertText.textContent = alertMessage;
            alertContainer.classList.remove("hidden");

            // Ocultar la alerta al dar clic en cerrar
            closeAlert.addEventListener("click", function () {
                alertContainer.classList.add("hidden");
            });

            // Opcional: Ocultar automáticamente después de 5 segundos
            setTimeout(() => {
                alertContainer.classList.add("hidden");
            }, 5000);
        }

        const successMessage = '@TempData["SuccessMessage"]'; // Obtén el mensaje desde el TempData
        if (successMessage) {
            const successAlertContainer = document.getElementById("success-alert-container");
            const successAlertText = document.getElementById("success-alert-message");
            const closeSuccessAlert = document.getElementById("close-success-alert");

            successAlertText.textContent = successMessage;
            successAlertContainer.classList.remove("hidden");

            // Ocultar la alerta al dar clic en cerrar
            closeSuccessAlert.addEventListener("click", function () {
                successAlertContainer.classList.add("hidden");
            });

            // Opcional: Ocultar automáticamente después de 5 segundos
            setTimeout(() => {
                successAlertContainer.classList.add("hidden");
            }, 5000);
        }
    });
</script>